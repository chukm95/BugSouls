$VERTEX
#version 330 core

uniform mat4 projectionMatrix;

layout (location = 0) in vec3 v_position;
layout (location = 1) in vec3 v_normal;
layout (location = 2) in vec2 v_uv;
layout (location = 3) in vec4 v_color;
layout (location = 4) in float v_texChan;

out vec3 f_position;
out vec3 f_normal;
out vec2 f_uv;
out vec4 f_color;
out float f_texChan;

void main(){
	f_position = v_position;
	f_normal = v_normal;
	f_uv = v_uv;
	f_color = v_color;
	f_texChan = f_texChan;
	gl_Position = projectionMatrix * vec4(v_position.xyz, 1);
}

$FRAGMENT
#version 330 core

uniform vec3 ambient;
uniform vec3 diffuse_dir;
uniform vec3 diffuse_color;

uniform sampler2D sampler;

in vec3 f_position;
in vec3 f_normal;
in vec2 f_uv;
in vec4 f_color;
in float f_texChan;

out vec4 color;

void main(){
	vec3 norm = normalize(f_normal);
	vec3 difdir = normalize(diffuse_dir - f_position); 
	float dif = max(dot(norm, difdir), 0.0);
	vec3 diffuse = dif * diffuse_color;
	color = vec4(ambient + diffuse, 1.0) * (texture(sampler, f_uv) * f_color);
}